#!/bin/fakeroot bash

set -e

file="$1"

[ -f "DPTBUILD" ] && [ -z "$1" ] && {
	file="$PWD/DPTBUILD"
}

[ -n "$1" ] || [ -f "DPTBUILD" ] || {
	echo "Please specify a DPTBUILD file"
	exit 1
}

[ -f "$file" ] || {
	echo "File $file does not exist!"
	exit 1
}

set -u

file="$(readlink -f "$file")"

source "$file"

tmp_dir="$(mktemp -d)"
oldpwd="$(pwd)"

function msg() {
	tput setaf 10
	echo "==>" "$@" >/dev/stderr
	tput sgr0
}

trap 'exit_handling' EXIT

function exit_handling() {
	# error handling goes here
	[ -n "$pkgdir" ] && rm -rf "$pkgdir"
	[ -n "$tmp_dir" ] && rm -rf "$tmp_dir"
}

function strip_binaries_and_libraries() {
	# Modified from arch linux's makepkg script
	if [[ -v NO_STRIP_BINARIES ]]; then
		return
	fi
	local binary bindirs
	bindirs=(
		$pkgdir/bin
		$pkgdir/lib
		$pkgdir/sbin
		$pkgdir/usr/bin
		$pkgdir/usr/lib
		$pkgdir/usr/sbin
		$pkgdir/usr/local/bin
		$pkgdir/usr/local/lib
		$pkgdir/usr/local/sbin
		$pkgdir/opt/*/bin
		$pkgdir/opt/*/lib
		$pkgdir/opt/*/sbin
	)
	find ${bindirs[@]} -type f 2>/dev/null | while read binary; do
		if [ -w "$binary" ]; then
			PREVIOUSLY_WRITEABLE="true"
		else
			chmod u+w "$binary"
			PREVIOUSLY_WRITEABLE="false"
		fi
		case "$(file -biz "$binary")" in
		*application/x-sharedlib*) # Libraries
			/usr/bin/strip --strip-debug "$binary" && msg "Stripping $binary" ;;
		*application/x-executable* | *application/x-pie-executable*) # Binaries
			/usr/bin/strip "$binary" && msg "Stripping $binary" ;;
		esac
		if [ "$PREVIOUSLY_WRITEABLE" == "false" ]; then
			chmod u-w "$binary"
		fi
	done
}

function deps_to_string() {
	for x in "$@"; do
		name="$(echo -n "$x" | grep -E -o '^[^>=]+')"
		version="$({ echo -n "$x" | grep -P -o "(?<=$name).*" | sed 's/==//g'; } || true)"
			echo "		("
			echo "			name: \"$name\","
			echo "			version: \"$version\""
			echo "		),"
	done
}

function glue_to_string() {
	declare -n v_glue_bin="$1"
	declare -n v_glue_glob="$2"

	if [[ -v v_glue_bin ]]; then
		echo "		Bin,"
	fi

	if [[ -v v_glue_glob ]]; then
		echo "		Glob(["
		for x in "${v_glue_glob[@]}"; do
			echo "			\"$x\","
		done
		echo "		])"
	fi
}

cd "$tmp_dir"

msg "Fetching sources"
for x in "${sources[@]}"; do
	wget -q --show-progress "$x"
	tar -xf "${x##*/}" &>/dev/null || true
done

if [[ -v files ]]; then
	msg "Copying files"
	for x in "${files[@]}"; do
		cp -rax "$(dirname "$file")/$x" "$x"
	done
fi

msg "Building package"
for x in "${pkgname[@]}"; do
	pkgdir="$(mktemp -d)"
	if declare -p pkgname 2> /dev/null | grep -q '^declare -a'; then
		build_command="${x}_build"
		depends_variable="$(echo "${x}_depends" | tr '-' '_')"
		ver_variable="$(echo "${x}_pkgver" | tr '-' '_')"
		glue_bin_variable="$(echo "${x}_glue_bin" | tr '-' '_')"
		glue_glob_variable="$(echo "${x}_glue_glob" | tr '-' '_')"
	else
		build_command="build"
		depends_variable="depends"
		ver_variable="pkgver"
		glue_bin_variable="glue_bin"
		glue_glob_variable="glue_glob"
	fi
	declare -n deps="$depends_variable"
	declare -n ver="$ver_variable"
	ver="${ver:-$pkgver}"
	if [[ -v USE_HOST_TOOLS ]]; then
		$build_command
	else
		dpt dev-env bash coreutils fakeroot "${makedepends[@]}" <<EOF
set -e
set -u

source "$file"
pkgdir="$pkgdir"
oldpwd="$oldpwd"

source "$file"
$build_command
EOF
	fi

	mkdir -p $pkgdir/dpt
	cat <<EOF >$pkgdir/dpt/pkg.ron
(
	name: "$x",
	version: "$ver",
	depends: [
$(deps_to_string "${deps[@]}")
	],
	glue: [
$(glue_to_string "$glue_bin_variable" "$glue_glob_variable")
	]
)
EOF
	# dpt gen-pkg "$pkgdir" "$oldpwd/$x-$ver.dpt"
	tar --zstd -C "$pkgdir" -cf "$oldpwd/$x-$ver.dpt" "." 
	rm -rf "$pkgdir"
done

cd "$oldpwd"
rm -rf "$tmp_dir"
exit 0
